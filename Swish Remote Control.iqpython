{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT12, 1.0, False)\nright_drive_smart = Motor(Ports.PORT6, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nIntake = Motor(Ports.PORT8, False)\nCatapult_motor_a = Motor(Ports.PORT11, False)\nCatapult_motor_b = Motor(Ports.PORT5, True)\nCatapult = MotorGroup(Catapult_motor_a, Catapult_motor_b)\nOpticalSensor = Optical(Ports.PORT3)\nDistanceSensor = Distance(Ports.PORT4)\nTouchLED = Touchled(Ports.PORT9)\ncontroller = Controller()\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nSpin_Intake = Event()\nCatapult_loaded = False\nIntake_Spinning_Forw = False\nright_distance_high = False\nright_distance_low = False\nIntake_Spinning_Rev = False\n\ndef Load():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    wait(0.1, SECONDS)\n    Catapult.spin(FORWARD)\n    while not OpticalSensor.is_near_object():\n        wait(20, MSEC)\n    Catapult.stop()\n    Catapult.spin_for(FORWARD, 80, DEGREES)\n    Catapult_loaded = True\n\ndef Shoot():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    Intake.stop()\n    Intake_Spinning_Forw = False\n    Catapult_loaded = False\n    Catapult.spin(REVERSE)\n    wait(0.2, SECONDS)\n    Catapult.stop()\n\ndef when_started1():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    Catapult.set_velocity(127, RPM)\n    Intake.set_velocity(127, RPM)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    Catapult_loaded = False\n    Intake_Spinning_Forw = False\n    Intake_Spinning_Rev = False\n\ndef when_started2():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    TouchLED.set_brightness(100)\n    while True:\n        if right_distance_high:\n            TouchLED.set_color(Color.GREEN)\n        else:\n            if right_distance_low:\n                TouchLED.set_color(Color.BLUE)\n            else:\n                TouchLED.set_color(Color.RED)\n        wait(20, MSEC)\n\ndef when_started3():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if DistanceSensor.object_distance(MM) < 110 and DistanceSensor.object_distance(MM) > 0:\n            right_distance_high = True\n        else:\n            right_distance_high = False\n        wait(20, MSEC)\n\ndef onevent_controllerbuttonLDown_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    if Intake_Spinning_Rev:\n        Intake.stop()\n        Intake_Spinning_Rev = False\n    else:\n        Intake.spin(REVERSE)\n        Intake_Spinning_Rev = True\n\ndef onevent_controllerbuttonLUp_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    if Intake_Spinning_Forw:\n        Intake.stop()\n        Intake_Spinning_Forw = False\n    else:\n        Intake.spin(FORWARD)\n        Intake_Spinning_Forw = True\n\ndef onevent_controllerbuttonRUp_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    if OpticalSensor.is_near_object() or controller.buttonEUp.pressing():\n        Shoot()\n        wait(0.5, SECONDS)\n        Load()\n    else:\n        brain.play_sound(SoundType.WRONG_WAY)\n\ndef when_started4():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if DistanceSensor.object_distance(MM) < 680 and DistanceSensor.object_distance(MM) > 670:\n            right_distance_low = True\n        else:\n            right_distance_low = False\n        wait(20, MSEC)\n\ndef when_started5():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(\"Catapult Loaded\")\n        if Catapult_loaded:\n            brain.screen.set_pen_color(Color.GREEN)\n        else:\n            brain.screen.set_pen_color(Color.RED)\n        wait(0.05, SECONDS)\n        wait(20, MSEC)\n\ndef onevent_controllerbuttonFUp_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    drivetrain.stop()\n    drivetrain.drive(REVERSE)\n    while not right_distance_high:\n        drivetrain.set_drive_velocity((-100 + DistanceSensor.object_distance(MM) / 10), PERCENT)\n        if controller.buttonEUp.pressing():\n            break\n        wait(20, MSEC)\n    drivetrain.stop()\n\ndef onevent_controllerbuttonRDown_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    if not Catapult_loaded or controller.buttonLDown.pressing():\n        Load()\n    else:\n        brain.play_sound(SoundType.WRONG_WAY)\n\ndef onevent_controllerbuttonFDown_pressed_0():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    drivetrain.stop()\n    drivetrain.drive(REVERSE)\n    while not right_distance_low:\n        drivetrain.set_drive_velocity((-100 + DistanceSensor.object_distance(MM) / 25), PERCENT)\n        if controller.buttonEUp.pressing():\n            break\n        wait(20, MSEC)\n    drivetrain.stop()\n\n# Used to find the format string for printing numbers with the\n# desired number of decimal places\ndef print_to_console_number_format():\n        precision = 0\n        # Equivalent to setting precision to 'All Digits'\n        if vexcode_console_precision is None:\n                precision = 6\n        else:\n                precision = vexcode_console_precision\n\n        return \"{{:.{0}f}}\".format(precision)\ndef when_started6():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    while True:\n        if controller.buttonEDown.pressing():\n            print(print_to_console_number_format().format(DistanceSensor.object_distance(MM)), end=\"\")\n            print()\n            while not not controller.buttonEDown.pressing():\n                wait(20, MSEC)\n        wait(20, MSEC)\n\ndef when_started7():\n    global Spin_Intake, Catapult_loaded, Intake_Spinning_Forw, right_distance_high, right_distance_low, Intake_Spinning_Rev, vexcode_brain_precision, vexcode_console_precision\n    drivetrain.drive(FORWARD)\n    while True:\n        left_velocity = controller.axisA.position() + (0.0001 * (controller.axisC.position() ** 3))\n        right_velocity = controller.axisA.position() - (0.0001 * (controller.axisC.position() ** 3))\n        left_drive_smart.set_velocity(float(left_velocity), PERCENT)\n        right_drive_smart.set_velocity(float(right_velocity), PERCENT)\n        wait(20, MSEC)\n        print(DistanceSensor.object_distance(MM))\n\n# system event handlers\ncontroller.buttonLDown.pressed(onevent_controllerbuttonLDown_pressed_0)\ncontroller.buttonLUp.pressed(onevent_controllerbuttonLUp_pressed_0)\ncontroller.buttonRUp.pressed(onevent_controllerbuttonRUp_pressed_0)\ncontroller.buttonFUp.pressed(onevent_controllerbuttonFUp_pressed_0)\ncontroller.buttonRDown.pressed(onevent_controllerbuttonRDown_pressed_0)\ncontroller.buttonFDown.pressed(onevent_controllerbuttonFDown_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nws3 = Thread( when_started3 )\nws4 = Thread( when_started4 )\nws5 = Thread( when_started5 )\nws6 = Thread( when_started6 )\nws7 = Thread( when_started7 )\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[12,6,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11,5],"name":"Catapult","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"OpticalSensor","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[4],"name":"DistanceSensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[9],"name":"TouchLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}
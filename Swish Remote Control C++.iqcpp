{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT12, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor Intake = motor(PORT8, false);\nmotor CatapultMotorA = motor(PORT11, false);\nmotor CatapultMotorB = motor(PORT5, true);\nmotor_group Catapult = motor_group(CatapultMotorA, CatapultMotorB);\n\noptical OpticalSensor = optical(PORT3);\ndistance DistanceSensor = distance(PORT4);\ntouchled TouchLED = touchled(PORT9);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Load();\n// User defined function\nvoid myblockfunction_Shoot();\n\nint Brain_precision = 0, Console_precision = 0;\n\nbool Catapult_loaded, Intake_Spinning, right_distance_high, correct_distance_low;\n\nevent Spin_Intake = event();\n\n// User defined function\nvoid myblockfunction_Load() {\n  wait(0.1, seconds);\n  Catapult.spin(forward);\n  waitUntil(OpticalSensor.isNearObject());\n  Catapult.stop();\n  Catapult.spinFor(forward, 90.0, degrees, true);\n  Catapult_loaded = true;\n}\n\n// User defined function\nvoid myblockfunction_Shoot() {\n  Catapult_loaded = false;\n  Catapult.spin(reverse);\n  wait(0.2, seconds);\n  Catapult.stop();\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  TouchLED.setBrightness(100);\n  while (true) {\n    if (right_distance_high) {\n      TouchLED.setColor(green);\n    }\n    else {\n      if (correct_distance_low) {\n        TouchLED.setColor(blue);\n      }\n      else {\n        TouchLED.setColor(red);\n      }\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Catapult.setVelocity(127.0, rpm);\n  Intake.setVelocity(127.0, rpm);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Catapult_loaded = false;\n  Intake_Spinning = false;\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  if (Intake_Spinning) {\n    Intake.stop();\n    Intake_Spinning = false;\n  }\n  else {\n    if (Catapult_loaded && !OpticalSensor.isNearObject() || Controller.ButtonEUp.pressing()) {\n      Intake.spin(forward);\n      Intake_Spinning = true;\n    }\n    else {\n      Brain.playSound(wrongWay);\n    }\n  }\n}\n\n// \"when started\" hat block\nint whenStarted3() {\n  while (true) {\n    if (DistanceSensor.objectDistance(mm) < 740.0 && DistanceSensor.objectDistance(mm) > 720.0) {\n      right_distance_high = true;\n    }\n    else {\n      right_distance_high = false;\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  if (OpticalSensor.isNearObject() || Controller.ButtonEUp.pressing()) {\n    myblockfunction_Shoot();\n    wait(0.5, seconds);\n    myblockfunction_Load();\n  }\n  else {\n    Brain.playSound(wrongWay);\n  }\n}\n\n// \"when started\" hat block\nint whenStarted4() {\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Catapult Loaded\");\n    if (Catapult_loaded) {\n      Brain.Screen.setPenColor(green);\n    }\n    else {\n      Brain.Screen.setPenColor(red);\n    }\n    wait(0.05, seconds);\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted5() {\n  while (true) {\n    if (DistanceSensor.objectDistance(mm) < 1130.0 && DistanceSensor.objectDistance(mm) > 1110.0) {\n      correct_distance_low = true;\n    }\n    else {\n      correct_distance_low = false;\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonFDown pressed\" hat block\nvoid onevent_ControllerButtonFDown_pressed_0() {\n  Drivetrain.setDriveVelocity(25.0, percent);\n  Drivetrain.setTurnVelocity(25.0, percent);\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted6() {\n  while (true) {\n    Brain.Screen.setCursor(2, 2);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(DistanceSensor.objectDistance(mm)));\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  if (!Catapult_loaded || Controller.ButtonLDown.pressing()) {\n    myblockfunction_Load();\n  }\n  else {\n    Brain.playSound(wrongWay);\n  }\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToConsole_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Console_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted7() {\n  while (true) {\n    if(GetKeyState('A') & 0x8000/*Check if high-order bit is set (1 << 15)*/) {\n      printf(printToConsole_numberFormat(), static_cast<float>(DistanceSensor.objectDistance(mm)));\n      printf(\"\\n\");\n      waitUntil((!Controller.ButtonEDown.pressing()));\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonFDown.pressed(onevent_ControllerButtonFDown_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  vex::task ws2(whenStarted3);\n  vex::task ws3(whenStarted4);\n  vex::task ws4(whenStarted5);\n  vex::task ws5(whenStarted6);\n  vex::task ws6(whenStarted7);\n  whenStarted1();\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[12,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11,5],"name":"Catapult","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"OpticalSensor","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[4],"name":"DistanceSensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[9],"name":"TouchLED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}
{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\nleft_drive_smart = Motor(Ports.PORT12, 1.0, False)\nright_drive_smart = Motor(Ports.PORT6, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nIntake = Motor(Ports.PORT8, False)\nCatapult_motor_a = Motor(Ports.PORT5, False)\nCatapult_motor_b = Motor(Ports.PORT11, True)\nCatapult = MotorGroup(Catapult_motor_a, Catapult_motor_b)\nOpticalSensor = Optical(Ports.PORT3)\nBumper_Sensor = Bumper(Ports.PORT10)\nDistanceSensor = Distance(Ports.PORT4)\nFishingLine = Motor(Ports.PORT2, False)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Swish Remote Control Exponential Python\n# \tAuthor:       Gabriel RÃ¼gge Martiny\n# \tCreated:      06/03/2025\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n#Library imports\nfrom vex import *\nimport math\n\n#Begin project code\n''' Variables:\n    L_Up_Button_pressed: Is the Button L Up on the remote pressed;; Is set to True when you press the button;\n    intake_spinning: Is the Intake spinning;\n    Catapult_loaded: Is the Catapult loaded;\n    Catapult_loading: Is the Catapult currently loading;\n    low_goal: The constant distance to go to shoot in the low goal;\n    fishinglineturns: Turns the fishing line motor has done;\n'''\n##########################################################################Variables###########################################################################################################\nL_Up_Button_pressed = False\nintake_spinning = False\nCatapult_loaded = False\nCatapult_loading = False\nlow_goal = 700\nfishinglineturns = 11\nIntake.stop()\ndrivetrain.set_drive_velocity(0, PERCENT)\ndrivetrain.drive(FORWARD)\nCatapult.set_velocity(80, PERCENT)\nIntake.set_velocity(100, PERCENT)\nbrain.timer.clear()\nOpticalSensor.set_light(LedStateType.ON)\nFishingLine.set_velocity(100, PERCENT)\n##########################################################################Functions###########################################################################################################\ndef StartLoad():\n    global Catapult_loading\n    Catapult.spin(REVERSE)\n    Catapult_loading = True\n\n\ndef Load():#loading of the catapult\n    global Catapult_loading, Catapult_loaded\n    if OpticalSensor.is_near_object() == True:\n        print(\"OpticalSensor detects object\")\n        wait(20, MSEC)\n        Catapult.stop()\n        Catapult.spin_for(REVERSE, 70, DEGREES)# 80 degrees were tested, goes down a bit further\n        Catapult_loaded = True\n        Catapult_loading = False\n\ndef Shoot():#shooting of the catapult\n    Intake.stop()\n    intake_spinning = False\n    Catapult.spin(FORWARD)#activates release mechanism of the catapult\n    wait(500, MSEC)\n    Catapult.stop()\n    Catapult_loaded = False\n##########################################################################Main Loop###########################################################################################################\nwait(500, MSEC)\nbrain_inertial.calibrate()\nbrain_inertial.set_rotation(90, DEGREES)#Starting Zone: left side, 90 degrees ; right side: -90 degrees\nwhile True:\n\n    #Driving and Turning\n    left_velocity = controller.axisA.position() + (controller.axisC.position() ** 3) / 10000\n    right_velocity = controller.axisA.position() - (controller.axisC.position() ** 3) / 10000\n    left_drive_smart.set_velocity(float(left_velocity), PERCENT)\n    right_drive_smart.set_velocity(float(right_velocity), PERCENT)\n    wait(20, MSEC)\n\n    #Intake\n    if controller.buttonLUp.pressing():\n        if not L_Up_Button_pressed:\n            if intake_spinning:\n                Intake.stop()\n                intake_spinning = False\n            else:\n                Intake.spin(FORWARD)\n                intake_spinning = True\n        L_Up_Button_pressed = True\n    else:\n        L_Up_Button_pressed = False\n\n    #Catapult\n    if Catapult_loading == True:\n        Load()\n    else:\n        if controller.buttonRUp.pressing():#shoot and load\n            Shoot()\n            wait(500, MSEC)\n            StartLoad()\n        if controller.buttonRDown.pressing():#load only\n            StartLoad()\n\n    #Fishing Line\n    if controller.buttonFUp.pressing():\n        fishinglineturns = 0\n        FishingLine.set_position(0, TURNS)\n\n    if controller.buttonFDown.pressing():\n        FishingLine.stop()\n        fishinglineturns = 11\n\n    if fishinglineturns < 10.5:\n        FishingLine.spin(FORWARD)\n        fishinglineturns = FishingLine.position(TURNS)\n    else:\n        FishingLine.stop()\n        fishinglineturns = 11\n\n    #Stopping the program\n    if controller.buttonEUp.pressing() and controller.buttonEDown.pressing():\n        brain.program_stop()","textLanguage":"python","robotConfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[12,6,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5,11],"name":"Catapult","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3],"name":"OpticalSensor","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[10],"name":"Bumper_Sensor","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"DistanceSensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[2],"name":"FishingLine","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}